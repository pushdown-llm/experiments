Of course. I can provide the SQL query and the necessary optimization code.

Here is the SQL that combines the data selection and filtering into a single query for the database, along with the optimization code to improve its performance.

```
-- This query selects all orders from the year 1997, pushing the filter condition down to the database.
SELECT
    o_orderkey,
    o_custkey,
    o_orderstatus,
    o_totalprice,
    o_orderdate,
    o_orderpriority,
    o_clerk,
    o_shippriority,
    o_comment
FROM
    "public".orders
WHERE
    o_orderdate >= '1997-01-01' AND o_orderdate < '1998-01-01';

-- This statement creates a B-tree index on the order date column to significantly accelerate the query execution.
CREATE INDEX IF NOT EXISTS idx_orders_o_orderdate ON "public".orders (o_orderdate);
```

I have provided the SQL query that performs the required transformation directly within the database and added a CREATE INDEX statement to ensure the query runs efficiently by avoiding a full table scan.