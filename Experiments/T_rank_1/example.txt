SELECT 
	n_name, 
	customer_position,
	o_custkey, 
	total_price
FROM (
	SELECT 
		n_name, 
		RANK() OVER (PARTITION BY n_name ORDER BY SUM(o_totalprice) DESC) as customer_position, 
		o_custkey, 
		SUM(o_totalprice) as total_price
	FROM orders 
		JOIN customer ON o_custkey = c_custkey
		JOIN nation ON c_nationkey = n_nationkey
	GROUP BY n_name, o_custkey
) ranked_customers
WHERE customer_position <= 3
ORDER BY n_name, customer_position

////////// EXECUTION PLAN:

Incremental Sort  (cost=38299.01..700232.17 rows=1500000 width=148)
  Sort Key: nation.n_name, (rank() OVER (?))
  Presorted Key: nation.n_name
  ->  WindowAgg  (cost=35066.95..584933.11 rows=1500000 width=148)
        Run Condition: (rank() OVER (?) <= 3)
        ->  Incremental Sort  (cost=35066.59..558683.11 rows=1500000 width=140)
              Sort Key: nation.n_name, (sum(orders.o_totalprice)) DESC
              Presorted Key: nation.n_name
              ->  GroupAggregate  (cost=14030.50..313175.05 rows=1500000 width=140)
                    Group Key: nation.n_name, orders.o_custkey
                    ->  Nested Loop  (cost=14030.50..283175.05 rows=1500000 width=116)
                          ->  Gather Merge  (cost=14030.08..31500.05 rows=150000 width=108)
                                Workers Planned: 2
                                ->  Sort  (cost=13030.05..13186.30 rows=62500 width=108)
                                      Sort Key: nation.n_name, customer.c_custkey
                                      ->  Hash Join  (cost=1.56..4418.44 rows=62500 width=108)
                                            Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                            ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)
                                            ->  Hash  (cost=1.25..1.25 rows=25 width=108)
                                                  ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)
                          ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.50 rows=18 width=12)
                                Index Cond: (o_custkey = customer.c_custkey)

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------



CREATE MATERIALIZED VIEW mv_t_rank_1 AS 
EXPLAIN SELECT 
		n_name, 
		RANK() OVER (PARTITION BY n_name ORDER BY SUM(o_totalprice) DESC) as customer_position, 
		o_custkey, 
		SUM(o_totalprice) as total_price
	FROM orders 
		JOIN customer ON o_custkey = c_custkey
		JOIN nation ON c_nationkey = n_nationkey
	GROUP BY n_name, o_custkey;

CREATE INDEX idx_mv_t_rank_1_total_price ON mv_t_rank_1 (total_price);

explain SELECT 
	n_name, 
	customer_position,
	o_custkey, 
	total_price
FROM mv_t_rank_1
WHERE customer_position <= 3
ORDER BY n_name, customer_position


"WindowAgg  (cost=35066.95..584933.11 rows=1500000 width=148)"
"  ->  Incremental Sort  (cost=35066.59..558683.11 rows=1500000 width=140)"
"        Sort Key: nation.n_name, (sum(orders.o_totalprice)) DESC"
"        Presorted Key: nation.n_name"
"        ->  GroupAggregate  (cost=14030.50..313175.05 rows=1500000 width=140)"
"              Group Key: nation.n_name, orders.o_custkey"
"              ->  Nested Loop  (cost=14030.50..283175.05 rows=1500000 width=116)"
"                    ->  Gather Merge  (cost=14030.08..31500.05 rows=150000 width=108)"
"                          Workers Planned: 2"
"                          ->  Sort  (cost=13030.05..13186.30 rows=62500 width=108)"
"                                Sort Key: nation.n_name, customer.c_custkey"
"                                ->  Hash Join  (cost=1.56..4418.44 rows=62500 width=108)"
"                                      Hash Cond: (customer.c_nationkey = nation.n_nationkey)"
"                                      ->  Parallel Seq Scan on customer  (cost=0.00..4225.00 rows=62500 width=8)"
"                                      ->  Hash  (cost=1.25..1.25 rows=25 width=108)"
"                                            ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)"
"                    ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.50 rows=18 width=12)"
"                          Index Cond: (o_custkey = customer.c_custkey)"

"Sort  (cost=2340.25..2340.43 rows=74 width=46)"
"  Sort Key: n_name, customer_position"
"  ->  Seq Scan on mv_t_rank_1  (cost=0.00..2337.95 rows=74 width=46)"
"        Filter: (customer_position <= 3)"

" TOTAL: 587 273,54 "

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------



CREATE MATERIALIZED VIEW mv_t_rank_1 AS 
SELECT 
      c_nationkey, 
      RANK() OVER (PARTITION BY c_nationkey ORDER BY SUM(o_totalprice) DESC) as customer_position, 
      o_custkey, 
      SUM(o_totalprice) as total_price
FROM orders 
      JOIN customer ON o_custkey = c_custkey
GROUP BY c_nationkey, o_custkey;

CREATE INDEX idx_mv_t_rank_1_total_price ON mv_t_rank_1 (total_price);

SELECT 
	n_name, 
	customer_position,
	o_custkey, 
	total_price
FROM mv_t_rank_1
		JOIN nation ON c_nationkey = n_nationkey
WHERE customer_position <= 3
ORDER BY n_name, customer_position

"WindowAgg  (cost=237661.02..429344.66 rows=1500000 width=48)"
"  ->  Incremental Sort  (cost=237660.90..403094.66 rows=1500000 width=40)"
"        Sort Key: customer.c_nationkey, (sum(orders.o_totalprice)) DESC"
"        Presorted Key: customer.c_nationkey"
"        ->  GroupAggregate  (cost=231549.09..265299.09 rows=1500000 width=40)"
"              Group Key: customer.c_nationkey, orders.o_custkey"
"              ->  Sort  (cost=231549.09..235299.09 rows=1500000 width=16)"
"                    Sort Key: customer.c_nationkey, orders.o_custkey"
"                    ->  Hash Join  (cost=6975.00..52037.61 rows=1500000 width=16)"
"                          Hash Cond: (orders.o_custkey = customer.c_custkey)"
"                          ->  Seq Scan on orders  (cost=0.00..41125.00 rows=1500000 width=12)"
"                          ->  Hash  (cost=5100.00..5100.00 rows=150000 width=8)"
"                                ->  Seq Scan on customer  (cost=0.00..5100.00 rows=150000 width=8)"

"Sort  (cost=2359.34..2369.75 rows=4166 width=148)"
"  Sort Key: nation.n_name, mv_t_rank_1.customer_position"
"  ->  Hash Join  (cost=1.56..2108.87 rows=4166 width=148)"
"        Hash Cond: (mv_t_rank_1.c_nationkey = nation.n_nationkey)"
"        ->  Seq Scan on mv_t_rank_1  (cost=0.00..2017.95 rows=33332 width=48)"
"              Filter: (customer_position <= 3)"
"        ->  Hash  (cost=1.25..1.25 rows=25 width=108)"
"              ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108)"

" TOTAL: 431 714,41 "



-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------



CREATE MATERIALIZED VIEW mv_t_rank_1 AS 
SELECT 
      c.c_nationkey,
      c.c_custkey,
      SUM(o.o_totalprice) AS total_price
FROM 
      customer c
JOIN 
      orders o ON c.c_custkey = o.o_custkey
GROUP BY 
      c.c_nationkey, c.c_custkey

CREATE INDEX idx_mv_t_rank_1_total_price ON mv_t_rank_1 (c_nationkey);

WITH ranked_customers AS (
    SELECT 
        c_nationkey,
        c_custkey,
        total_price,
        ROW_NUMBER() OVER (PARTITION BY c_nationkey ORDER BY total_price DESC) AS customer_position
    FROM 
        mv_t_rank_1
)
SELECT 
    n.n_name,
    rc.customer_position,
    rc.c_custkey,
    rc.total_price AS "Total price"
FROM 
    ranked_customers rc
JOIN 
    nation n ON rc.c_nationkey = n.n_nationkey
WHERE 
    rc.customer_position <= 3
ORDER BY 
    n.n_name, rc.customer_position

"Finalize GroupAggregate  (cost=105037.47..144164.92 rows=150000 width=40)"
"  Group Key: c.c_custkey"
"  ->  Gather Merge  (cost=105037.47..140039.92 rows=300000 width=40)"
"        Workers Planned: 2"
"        ->  Sort  (cost=104037.45..104412.45 rows=150000 width=40)"
"              Sort Key: c.c_custkey"
"              ->  Partial HashAggregate  (cost=79060.98..87039.50 rows=150000 width=40)"
"                    Group Key: c.c_custkey"
"                    Planned Partitions: 8"
"                    ->  Parallel Hash Join  (cost=5006.25..39021.92 rows=625000 width=16)"
"                          Hash Cond: (o.o_custkey = c.c_custkey)"
"                          ->  Parallel Seq Scan on orders o  (cost=0.00..32375.00 rows=625000 width=12)"
"                          ->  Parallel Hash  (cost=4225.00..4225.00 rows=62500 width=8)"
"                                ->  Parallel Seq Scan on customer c  (cost=0.00..4225.00 rows=62500 width=8)"

"Sort  (cost=12886.28..12910.28 rows=9600 width=148)"
"  Sort Key: n.n_name, (row_number() OVER (?))"
"  ->  Hash Join  (cost=9741.45..12251.30 rows=9600 width=148)"
"        Hash Cond: (mv_t_rank_1.c_nationkey = n.n_nationkey)"
"        ->  WindowAgg  (cost=9739.89..11275.87 rows=76800 width=48)"
"              Run Condition: (row_number() OVER (?) <= 3)"
"              ->  Sort  (cost=9739.87..9931.87 rows=76800 width=40)"
"                    Sort Key: mv_t_rank_1.c_nationkey, mv_t_rank_1.total_price DESC"
"                    ->  Seq Scan on mv_t_rank_1  (cost=0.00..1408.00 rows=76800 width=40)"
"        ->  Hash  (cost=1.25..1.25 rows=25 width=108)"
"              ->  Seq Scan on nation n  (cost=0.00..1.25 rows=25 width=108)"

" TOTAL: 431 714,41 "




















BEGIN;

CREATE INDEX idx_customer_custkey ON customer(c_custkey) INCLUDE (c_nationkey);
CREATE INDEX idx_orders_custkey ON orders(o_custkey) INCLUDE (o_totalprice);

CREATE MATERIALIZED VIEW mv_t_rank_1 AS 
SELECT 
    c.c_nationkey,
    c.c_custkey,
    SUM(o.o_totalprice) AS total_price
FROM 
    customer c
JOIN 
    orders o ON c.c_custkey = o.o_custkey
GROUP BY 
    c.c_nationkey, c.c_custkey;

CREATE INDEX idx_mv_t_rank_1_nationkey_price ON mv_t_rank_1 (c_nationkey, total_price DESC) 
INCLUDE (c_custkey);

WITH ranked_customers AS (
    SELECT 
        c_nationkey,
        c_custkey,
        total_price,
        ROW_NUMBER() OVER (
            PARTITION BY c_nationkey 
            ORDER BY total_price DESC
        ) AS customer_position
    FROM 
        mv_t_rank_1
)
SELECT 
    n.n_name,
    rc.customer_position,
    rc.c_custkey,
    rc.total_price AS "Total price"
FROM 
    ranked_customers rc
JOIN 
    nation n ON rc.c_nationkey = n.n_nationkey
WHERE 
    rc.customer_position <= 3
ORDER BY 
    n.n_name, rc.customer_position;


"GroupAggregate  (cost=1.36..78028.51 rows=150000 width=40)"
"  Group Key: c.c_custkey"
"  ->  Merge Join  (cost=1.36..68653.51 rows=1500000 width=16)"
"        Merge Cond: (c.c_custkey = o.o_custkey)"
"        ->  Index Only Scan using idx_customer_custkey on customer c  (cost=0.42..3916.44 rows=150000 width=8)"
"        ->  Index Only Scan using idx_orders_custkey on orders o  (cost=0.43..45612.43 rows=1500000 width=12)"

"Sort  (cost=9918.46..9949.71 rows=12500 width=148)"
"  Sort Key: n.n_name, (row_number() OVER (?))"
"  ->  Hash Join  (cost=2.06..9067.86 rows=12500 width=148)"
"        Hash Cond: (mv_t_rank_1.c_nationkey = n.n_nationkey)"
"        ->  WindowAgg  (cost=0.50..7798.29 rows=99996 width=48)"
"              Run Condition: (row_number() OVER (?) <= 3)"
"              ->  Index Only Scan using idx_mv_t_rank_1_nationkey_price on mv_t_rank_1  (cost=0.42..6048.36 rows=99996 width=40)"
"        ->  Hash  (cost=1.25..1.25 rows=25 width=108)"
"              ->  Seq Scan on nation n  (cost=0.00..1.25 rows=25 width=108)"